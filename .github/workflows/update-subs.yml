name: Hourly subreddit subscriber logger

on:
  schedule:
    - cron: "0 * * * *"   # run every hour on the hour (UTC)
  workflow_dispatch:       # allow manual runs

jobs:
  update-subs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Fetch subreddit subscriber count
        id: fetch
        run: |
          SUB="indianrailways"
          echo "Fetching subscriber count for r/$SUB"

          COUNT=0
          for i in {1..3}; do
            JSON=$(curl -s -L -A "Mozilla/5.0 (compatible; GitHubActions/1.0)" \
              "https://www.reddit.com/r/${SUB}/about.json?raw_json=1")
            
            # extract subscriber count
            COUNT=$(echo "$JSON" | jq -r '.data.subscribers // 0' 2>/dev/null)
            COUNT=${COUNT:-0}

            if [ "$COUNT" -gt 0 ]; then
              break
            fi
            echo "Attempt $i failed (got $COUNT). Retrying in 5s..."
            sleep 5
          done

          echo "Final fetched count: $COUNT"
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Ensure data.json exists
        run: |
          if [ ! -f data.json ]; then
            echo '{"logs":[]}' > data.json
          fi

      - name: Append new entry to data.json
        run: |
          NOW_MS=$(($(date +%s) * 1000))
          COUNT=${{ steps.fetch.outputs.count }}
          echo "Now (ms): $NOW_MS, Count: $COUNT"

          if [ "$COUNT" -eq 0 ]; then
            echo "Count is 0, skipping log update (likely API issue)."
            exit 0
          fi

          LAST_TIME=$(jq -r '.logs | if length>0 then .[-1].time else 0 end' data.json)
          if [ "$LAST_TIME" -lt "$NOW_MS" ]; then
            jq --arg time "$NOW_MS" --argjson count "$COUNT" \
              '.logs += [{"time": ($time|tonumber), "count": $count}]' \
              data.json > data.tmp && mv data.tmp data.json
          else
            echo "Already logged for this timestamp. Skipping append."
          fi

          # Trim to last 10,000 logs (keeps file light)
          jq '.logs |= (sort_by(.time) | unique_by(.time) | reverse | .[0:10000] | reverse)' \
            data.json > data.tmp && mv data.tmp data.json

      - name: Commit & push data.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data.json
          git diff --quiet && echo "No changes to commit" || git commit -m "Update subscriber log: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
